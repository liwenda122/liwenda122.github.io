<template>
  <div class="hw_vehicle_details">
    <div class="vehicle_details_top gradient_div">
      <div class="details_top_box">
        <div class="details_top_svg_box">
          <svg-icon icon-class="iconmonitoring" class="details_top_svg"></svg-icon>
        </div>
        <div class="details_top_word">{{vehicleName}}({{vehicleType | formatType}})</div>
      </div>
      <div class="details_top_box">
        <div class="details_top_word">{{$t('mainPage.basicInformation')}}</div>
        <ul class="details_top_basic_info_list">
          <li v-for="(basicInfo, index) in basicInfoList" :key="index" class="details_top_basic_info_item">
            <div class="details_top_basic_info_name" :title="$t(basicInfo.name)">{{ $t(basicInfo.name) + ':' }}</div>
            <div class="details_top_basic_info_value" :title="basicInfo.value">{{ basicInfo.value }}</div>
          </li>
        </ul>
      </div>
      <div class="details_top_box">
        <div class="details_top_real_info_title_box">
          <div class="details_top_word">{{ getDataTime | dateFormat('LLLL') }}</div>
          <!-- 仪表盘按钮 -->
          <!-- <div class="details_top_real_info_map_btn">{{ $t('mainPage.instrumentPanel') }}</div> -->
        </div>
        <div class="details_top_real_info_soc_box">
          <progress-bar :percentage="energyLeft"></progress-bar>
        </div>
        <ul class="details_top_real_info_list">
          <li class="details_top_real_info_item"
            v-for="(realInfo, index) in realInfoList"
            :key="index"
            v-show="realInfo.show"
          >
            <div class="details_top_real_info_name" :title="$t(realInfo.name)">{{ $t(realInfo.name) + ':' }}</div>
            <div class="details_top_real_info_value" :title="realInfo.value + ' ' + realInfo.unit">{{ realInfo.value + ' ' + realInfo.unit }}</div>
          </li>
        </ul>
      </div>
      <div class="details_top_box">
        <div class="details_top_word">{{ tabName }}</div>
        <ul class="details_top_basic_info_list">
          <li class="details_top_basic_info_item" v-for="(batteryFault, index) in batteryFaultList" :key="index">
            <div class="details_top_battery_fault_name" :title="$t(batteryFault.name)">{{ $t(batteryFault.name) + ':' }}</div>
            <div class="details_top_battery_fault_value" :title="batteryFault.value">{{ batteryFault.value }}</div>
          </li>
        </ul>
      </div>
    </div>
    <div class="vehicle_details_bottom">
      <echartsOption
        :tapSetting="tapSetting"
        :chart-data="chartData"
        :code="statusCode"
      ></echartsOption>
    </div>
  </div>
</template>
<script setup lang="ts">
import { ref, onMounted, onActivated, onDeactivated, onBeforeUnmount } from 'vue';
import { useArcoDesign } from 'arco-design-vue';
import Service from '@/api/OverseasService';
import echartsOption from '@/components/echartsOption.vue';
import progressBar from '@/components/ProgressBar.vue';
import { formatVehicleEnergyType } from '@/utils';

// 使用 Arco Design 的语言和时间库
const { $t, $moment } = useArcoDesign();

// 基本信息数据
const basicInfoList = ref([
  {
    name: 'mainPage.vehicleLn',
    value: ''
  },
  // ... 其他基本信息
]);

// 实时信息数据
const realInfoList = ref([
  {
    name: 'mainPage.vehicleSpeed',
    value: '',
    unit: 'km/h',
    show: true,
    id: 'ElecFuel'
  },
  // ... 其他实时信息
]);

// 电池故障数据
const batteryFaultList = ref([]);

// 电池信息数据
const batteryListL = ref([
  {
    name: 'mainPage.batteryLife',
    value: ''
  },
  {
    name: 'mainPage.batteryTypeInfo',
    value: ''
  },
  {
    name: 'mainPage.batteryLevel',
    value: ''
  }
  // ... 其他电池信息
]);

// 故障信息数据
const faultList = ref([
  {
    name: 'mainPage.seriousFault',
    value: 0
  },
  {
    name: 'mainPage.importantFault',
    value: 0
  },
  {
    name: 'mainPage.commontFault',
    value: 0
  }
  // ... 其他故障信息
]);

// 车辆基本信息
const vehicleId = ref('');
const vehicleName = ref('');
const vehicleType = ref('');

// 定时器相关数据
const intervalTimer = ref<number | null>(null);
const settingTime = 10 * 1000; // 设置定时器时间间隔

// 能量数据
const energyLeft = ref(0);

// 标签设置
const tabSetting = ref({
  ifShowFoldExpandBtn: true,
  tabTitle: 'mainPage.consumptionStatTitle',
  type: 'VehicleDetails',
  height: '450px',
  legendTitle: 'mainPage.eleConsumption',
  getDataType: 'electronic'
});

// 图表数据
const chartData = ref([]);

// 状态码
const statusCode = ref('noData');

// 数据获取时间
const getDataTime = ref('');

// 标签名称
const tabName = ref($t('mainPage.batteryReport'));

// 清除定时器
const clearTimer = () => {
  if (intervalTimer.value !== null) {
    clearInterval(intervalTimer.value);
    intervalTimer.value = null;
  }
};

// 开启定时器
const openTimer = () => {
  clearTimer();
  getVehicleInfo(true);
  intervalTimer.value = setInterval(() => {
    getVehicleInfo();
  }, settingTime);
};

// 获取车辆基本信息--实时信息--车型动参
const getVehicleInfo = (ifRefresh = false) => {
  // 调用Service请求数据
  Service
    .requestApi('getPcVehicleRealTimeInfo', { vehicleId: vehicleId.value })
    .then(res => {
      const data = res.data;
      
      // 设置基本信息
      vehicleName.value = data.vehicleName;
      vehicleType.value = data.powerType;
      getDataTime.value = data.terminalTime;

      // 设置实时信息
      if (data.onlineState === 'Offline') {
        // 处理离线状态
        realInfoList[0].value = 0;
        realInfoList[6].value = '-';
        // ... 处理其他实时信息的离线状态
      } else {
        // 处理在线状态
        realInfoList[0].value = data.speed || 0;
        // ... 处理其他实时信息的在线状态
      }

      // 设置基本信息列表
      const staticInfo = data.statticVehicleInfo[0];
      basicInfoList[0].value = staticInfo.vehicleLn || '-';
      // ... 设置其他基本信息列表
      
      // 处理不同能源类型
      if (data.powerType === 'Fuel' || data.powerType === 'FuelAndElectric') {
        realInfoList[10].value = data.engineOilPressure || '-';
        // ... 处理其他能源类型的数据
      } else if (data.powerType === 'Electric' || data.powerType === 'TrolleyBus') {
        realInfoList[6].value = data.mainMotorVoltage || '-';
        // ... 处理其他能源类型的数据
      }

      // 根据能源类型更新相关数据
      if (data.powerType === 'Fuel' || data.powerType === 'FuelAndElectric') {
        realInfoList[2].value = data.oilLeft || 0;
        // ... 更新其他能源类型的数据
        if (ifRefresh) {
          getVehicleFaultData();
        }
      } else if (data.powerType === 'Electric' || data.powerType === 'TrolleyBus') {
        realInfoList[1].value = data.batteryCapacitySOC || 0;
        // ... 更新其他能源类型的数据
        if (ifRefresh) {
          getBatteryData();
        }
      }

      if (ifRefresh) {
        getConsumptionIndicator();
      }
    })
    .catch(() => {});
};

// 获取Electric类型车辆电池数据
const getBatteryData = () => {
  // 更新标签名称
  tabName.value = $t('mainPage.batteryReport');

  // 请求电池数据
  Service
    .requestApi('getBatteryInfo', { vehicleId: vehicleId.value })
    .then(res => {
      const batteryInfo = res.data;

      // 处理电池信息
      if (batteryInfo && batteryInfo !== '{}') {
        batteryListL[0].value = batteryInfo.batteryUseTime + ' h';
        batteryListL[1].value = batteryInfo.batteryType || '-';
        batteryListL[2].value = batteryInfo.btySysRatedConsumption + ' kW·h';
      } else {
        batteryListL[0].value = '-';
        batteryListL[1].value = '-';
        batteryListL[2].value = '-';
      }

      batteryFaultList.value = batteryListL;
    })
    .catch(err => {
      // 处理错误情况
      batteryListL[0].value = '-';
      batteryListL[1].value = '-';
      batteryListL[2].value = '-';
      batteryFaultList.value = batteryListL;
      console.log(err);
    });
};


// 获取Fuel类型车辆故障数据
const getVehicleFaultData = () => {
  // 更新标签名称为故障报告
  tabName.value = $t('route.hwVehicleFault');

  // 计算起始时间和结束时间
  const beginTime = $moment().add(-2, 'day').startOf('day').format('YYYYMMDDHHmmss');
  const endTime = $moment().format('YYYYMMDDHHmmss');

  // 构建参数
  const params = {
    vehicleIds: vehicleId.value,
    beginTime: beginTime,
    endTime: endTime
  };

  // 请求故障数据
  Service
    .requestApi('getFaultMonitorList', params)
    .then(res => {
      if (res.code === 1) {
        const countMap = res.data.countMap;

        // 更新故障列表数据
        faultList[0].value = countMap.faultLevel1; // 严重故障
        faultList[1].value = countMap.faultLevel2; // 重要故障
        faultList[2].value = countMap.faultLevel3; // 一般故障

        // 更新电池故障列表数据
        batteryFaultList.value = faultList;
      }
    })
    .catch(() => {
      // 处理错误情况
      faultList[0].value = 0;
      faultList[1].value = 0;
      faultList[2].value = 0;
      batteryFaultList.value = faultList;
    });
};


// 获取车辆百公里能耗数据
const getConsumptionIndicator = () => {
  // 设置状态码为加载中
  statusCode.value = 'loading';

  // 构建参数
  const paramas = {
    dimension: 'time',
    endTime: $moment().add(-1, 'day').format('YYYYMMDD'),
    periodType: 'day',
    startTime: $moment().add(-30, 'day').format('YYYYMMDD'),
    statObjId: vehicleId.value,
    statObjType: 'Vehicle',
    statRangeType: 'single'
  };

  // 请求百公里能耗数据
  Service
    .requestApi('getConsumptionIndicator', paramas)
    .then(res => {
      if (res.code === 1 && res.data && res.data.length > 0) {
        // 更新图表数据并设置状态码为加载完成
        chartData.value = res.data;
        statusCode.value = 'loaded';
      } else {
        // 没有数据时清空图表数据并设置状态码为无数据
        chartData.value = [];
        statusCode.value = 'noData';
      }
    })
    .catch(() => {
      // 处理错误情况，设置状态码为无数据
      statusCode.value = 'noData';
    });
};


// 路由变化时监听
const routeChange = (to: any, from: any) => {
  if (to.name === 'hwVehicleDetail' && to.query.vehicleId !== vehicleId.value) {
    if (!to.query.vehicleId) return;
    vehicleId.value = to.query.vehicleId;
  }
};

// 在组件激活时开启定时器
onActivated(() => {
  openTimer();
});

// 在组件失活时清除定时器
onDeactivated(() => {
  clearTimer();
});

// 在组件卸载前清除定时器
onBeforeUnmount(() => {
  clearTimer();
});

// 初始化时获取路由中的 vehicleId
onMounted(() => {
  vehicleId.value = $route.query.vehicleId;
});
</script>
